/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package skillstats;

import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Greg
 */
public class SkillStats extends javax.swing.JFrame {

    /**
     * Creates new form SkillStats
     */
    public SkillStats() {
        initComponents();
        MatchStats.loadFromFile();
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                MatchStats.saveToFile();
            }
        });
        games1.setText("");
        games2.setText("");
        games3.setText("");
        games4.setText("");
        
        wr1.setText("");
        wr2.setText("");
        wr3.setText("");
        wr4.setText("");
        
        kda1.setText("");
        kda2.setText("");
        kda3.setText("");
        kda4.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        kdaheader = new javax.swing.JLabel();
        wrheader = new javax.swing.JLabel();
        gamesheader = new javax.swing.JLabel();
        games1 = new javax.swing.JLabel();
        wr1 = new javax.swing.JLabel();
        kda1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        games3 = new javax.swing.JLabel();
        games4 = new javax.swing.JLabel();
        wr3 = new javax.swing.JLabel();
        kda3 = new javax.swing.JLabel();
        kda4 = new javax.swing.JLabel();
        wr4 = new javax.swing.JLabel();
        games2 = new javax.swing.JLabel();
        wr2 = new javax.swing.JLabel();
        kda2 = new javax.swing.JLabel();
        topleftblankheader1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Skill Bracket Stats"));

        kdaheader.setText("KDA");

        wrheader.setText("WR");

        gamesheader.setText("Games");

        games1.setText("Games");

        wr1.setText("WR");

        kda1.setText("KDA");

        jLabel1.setText("Overall");

        jLabel2.setText("Very High");

        jLabel3.setText("High");

        jLabel4.setText("Normal");

        games3.setText("Games");

        games4.setText("Games");

        wr3.setText("WR");

        kda3.setText("KDA");

        kda4.setText("KDA");

        wr4.setText("WR");

        games2.setText("Games");

        wr2.setText("WR");

        kda2.setText("KDA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(73, 73, 73)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(games4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wr4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kda4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(games3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(kda3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(351, 351, 351))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(wr3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(topleftblankheader1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(gamesheader, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(games1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(games2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(wr1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                    .addComponent(wr2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(wrheader))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(kdaheader, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addComponent(kda1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(kda2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gamesheader)
                            .addComponent(wrheader)
                            .addComponent(kdaheader))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(games1)
                            .addComponent(wr1)
                            .addComponent(kda1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(topleftblankheader1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(games2)
                    .addComponent(wr2)
                    .addComponent(kda2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(games3)
                    .addComponent(wr3)
                    .addComponent(kda3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(games4)
                    .addComponent(wr4)
                    .addComponent(kda4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Load New Matches");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("print shit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("show stats");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("get skill");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getMatchUrlAfterDateAndId(String date, String matchid) {
        date = ""+(Long.parseLong(date)-1);
        matchid = ""+(Long.parseLong(matchid)-1);
        return "http://api.steampowered.com/IDOTA2Match_570/GetMatchHistory/v1?format=XML&account_id="+playerid+"&min_players=10&key=220827FF8FB587256FA12C01707B332C&date_max="+date+"&start_at_match_id="+matchid;
    }
    
    String playerid = "86809886"; //random lots of games played
    
    //String playerid = "32215305"; //eb
    //String playerid = "17647943";
    //String playerid = "21298149";
    
    
    String starturl = "http://api.steampowered.com/IDOTA2Match_570/GetMatchHistory/v1?format=XML&account_id="+playerid+"&min_players=10&key=220827FF8FB587256FA12C01707B332C";
    long newmatches = 0;
    static int matchthreads=0;
    static boolean listfinished=false;
    public void parse(String urlz) {
        try {
            URL url = new URL(urlz);

            URLConnection conn = url.openConnection();
            conn.setReadTimeout(5000);
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document docx = builder.parse(conn.getInputStream());
            //doc.getDocumentElement().normalize(); //optional
            
            
            String lastid="";
            String lasttime="";
            
            
            
            if(docx.getElementsByTagName("error").getLength()==0) {
                NodeList matches = docx.getElementsByTagName("match");
                System.out.println(matches.getLength());
                for(int ix=0; ix<matches.getLength(); ix++) {
                    Element match = ((Element)matches.item(ix));
                    
                    String lobby_type = match.getElementsByTagName("lobby_type").item(0).getTextContent();
                    String match_id = match.getElementsByTagName("match_id").item(0).getTextContent();    // not needed, loop is looking up using sequencial match id(currm)
                    
                    if(Long.parseLong(match_id)<=MatchStats.stopatid) {
                        return;
                    }
                    lasttime=match.getElementsByTagName("start_time").item(0).getTextContent();
                    
                    if(lobby_type.equals("0") || lobby_type.equals("7")) {
                        final String mid = match_id;
                        matchthreads++;
                        new Thread() {
                            @Override
                            public void run() {
                                try {
                                    URL ur2 = new URL("https://api.steampowered.com/IDOTA2Match_570/GetMatchDetails/V001/?format=XML&match_id="+mid+"&key=220827FF8FB587256FA12C01707B332C");
                                    URLConnection conn = ur2.openConnection();
                                    conn.setReadTimeout(5000);
                                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                                    DocumentBuilder builder = factory.newDocumentBuilder();
                                    Document doc = builder.parse(conn.getInputStream());
                                    
                                    int human_players = Integer.parseInt(doc.getElementsByTagName("human_players").item(0).getTextContent());
                                    String radiant_win = doc.getElementsByTagName("radiant_win").item(0).getTextContent();
                                    
                                    if(human_players==10) {
                                        String game_mode = doc.getElementsByTagName("game_mode").item(0).getTextContent();
                                        if(game_mode.equals("1") || game_mode.equals("2") || game_mode.equals("3") || game_mode.equals("4") || game_mode.equals("5")) {
                                            System.out.print(mid+": ");
                                            
                                            int kills = 0;
                                            int deaths = 0;
                                            int assists = 0;
                                            int[] heroids = new int[10];
                                            String[] playerids = new String[10];
                                            int slot=0;
                                            
                                            NodeList nl = doc.getElementsByTagName("player");
                                            int[] ids = new int[10];
                                            String outputstr="";
                                            boolean zeroHero = false;
                                            int gold_per_min=0;
                                            int xp_per_min=0;
                                            
                                            
                                            for(int i=0;i<10;i++) {
                                                Element el = (Element)nl.item(i);
                                                String s1 = el.getElementsByTagName("hero_id").item(0).getTextContent();
                                                ids[i]=Integer.parseInt(s1);
                                                
                                                heroids[i] = Integer.parseInt(el.getElementsByTagName("hero_id").item(0).getTextContent());
                                                playerids[i] = el.getElementsByTagName("account_id").item(0).getTextContent();
                                                
                                                outputstr+=s1+", ";
                                                if(ids[i]==0) {
                                                    zeroHero=true;
                                                }
                                                if(el.getElementsByTagName("account_id").item(0).getTextContent().equals(playerid)) {
                                                    //get kills and deaths
                                                    kills = Integer.parseInt(el.getElementsByTagName("kills").item(0).getTextContent());
                                                    deaths = Integer.parseInt(el.getElementsByTagName("deaths").item(0).getTextContent());
                                                    assists = Integer.parseInt(el.getElementsByTagName("assists").item(0).getTextContent());
                                                    gold_per_min = Integer.parseInt(el.getElementsByTagName("gold_per_min").item(0).getTextContent());
                                                    xp_per_min = Integer.parseInt(el.getElementsByTagName("xp_per_min").item(0).getTextContent());
                                                    slot=i;
                                                }
                                            }
                                            if(zeroHero) {
                                                System.out.println("Hero(es) not picked");
                                            }
                                            else {
                                                System.out.println(outputstr);
                                                
                                                boolean radiantwin = Boolean.parseBoolean(radiant_win);
                                                boolean win = (slot<5 && radiantwin)||(slot>=5 && !radiantwin);
                                                
                                                // STORE STATS
                                                new MatchStats(mid,slot,win,kills,deaths,assists,gold_per_min,xp_per_min,heroids,playerids);
                                                
                                                newmatches++;
                                            }
                                        }
                                    }
                                    
                                    
                                } catch (IOException | ParserConfigurationException | SAXException ex) {
                                    try {
                                        matchthreads++;
                                        Thread.sleep(500);
                                        run();
                                    } catch (InterruptedException ex1) {
                                        Logger.getLogger(SkillStats.class.getName()).log(Level.SEVERE, null, ex1);
                                    }
                                }

                                matchthreads--;
                            }
                        }.start();
                    }
                    else {
                        System.out.println("- "+lobby_type+"   ()");
                    }
                    lastid=match_id;
                }
                
                // RUN NEXT PAGE
                if(matches.getLength()>=100) {
                    parse(getMatchUrlAfterDateAndId(lasttime,lastid));
                }
                else {
                    System.out.println("DONE BRUV");
                }
            }
            else {
                System.out.println("x   THIS PAGE GIVE EROR??");
            }
            
            
            
        } catch (IOException | ParserConfigurationException | SAXException ex) {
            try {
                //ex.printStackTrace();
                System.out.println("190 : IOException | ParserConfigurationException | SAXException ex");
                Thread.sleep(1000);
                // RUN SAME AGAIN PLS
                parse(urlz);
            } catch (InterruptedException exce) {}
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton1.setEnabled(false);
        MatchStats.setStopId();
        matchthreads=0;
        listfinished = false;
        
        new Thread() {
            @Override
            public void run() {
                do {
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SkillStats.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while(!listfinished || matchthreads>0);
                jButton1.setEnabled(true);
                JOptionPane.showMessageDialog(null, newmatches+" new match(es) cached");
            }
        }.start();
        
        new Thread() {
            @Override
            public void run() {
                parse(starturl);
                listfinished = true;
            }
        }.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        Map<String,Integer> enemygames = new HashMap<>();
        /*for(MatchStats ms: MatchStats.matches) {
            int startid=0;
            if(ms.slot<5) {
                startid=5;
            }
            for(int i=startid;i<startid+5;i++) {
                if(enemygames.containsKey(ms.playerids[i])) {
                    enemygames.put(ms.playerids[i], enemygames.get(ms.playerids[i])+1);
                }
                else {
                    enemygames.put(ms.playerids[i], 1);
                }
            }
        }*/
        
        HashMap<String,Integer> enemywins = new HashMap<>();
        HashMap<String,Integer> enemyloss = new HashMap<>();
        for(MatchStats ms: MatchStats.matches) {
            if(ms.win) {
                int startid=0;
                if(ms.slot<5) {
                    startid=5;
                }
                for(int i=startid;i<startid+5;i++) {
                    if(enemywins.containsKey(ms.playerids[i])) {
                        enemywins.put(ms.playerids[i], enemywins.get(ms.playerids[i])+1);
                    }
                    else {
                        enemywins.put(ms.playerids[i], 1);
                    }
                }
            }
            else {
                int startid=0;
                if(ms.slot<5) {
                    startid=5;
                }
                for(int i=startid;i<startid+5;i++) {
                    if(enemyloss.containsKey(ms.playerids[i])) {
                        enemyloss.put(ms.playerids[i], enemyloss.get(ms.playerids[i])+1);
                    }
                    else {
                        enemyloss.put(ms.playerids[i], 1);
                    }
                }
            }
            int startid=0;
            if(ms.slot<5) {
                startid=5;
            }
            for(int i=startid;i<startid+5;i++) {
                if(enemygames.containsKey(ms.playerids[i])) {
                    enemygames.put(ms.playerids[i], enemygames.get(ms.playerids[i])+1);
                }
                else {
                    enemygames.put(ms.playerids[i], 1);
                }
            }
        }
        
        enemygames.remove("4294967295"); // this is the ID of private profiles
        enemywins.remove("4294967295"); // this is the ID of private profiles
        enemyloss.remove("4294967295"); // this is the ID of private profiles
        
        enemygames=sortByValueDesc(enemygames);
        int count=0;
        for(String ii: enemygames.keySet()) {
            count++;
            if(count>20) {
                break;
            }
            System.out.println(ii+": games: "+enemygames.get(ii)+" ("+enemywins.get(ii)+"/"+enemyloss.get(ii)+")");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(true) {
            Iterator<MatchStats> it = (Iterator<MatchStats>)MatchStats.matches.iterator();

            long Tkills = 0;
            long Tdeaths = 0;
            long Tassists = 0;
            long Tmatches = 0;
            long Twins = 0;

            while(it.hasNext()) {
                MatchStats ms = it.next();
                Tmatches++;
                Tkills+=ms.kills;
                Tdeaths+=ms.deaths;
                Tassists+=ms.assists;
                if(ms.win) {
                    Twins++;
                }
            }

            games1.setText(Tmatches+"");
            wr1.setText(((int)Math.round(Twins/(Tmatches*0.0001)))/100.0+"%");
            kda1.setText(0.01*Math.round((Tkills+Tassists)/(0.01*Tdeaths))+" ("+(Tkills)+"/"+(Tdeaths)+"/"+(Tassists)+")");
        }
        if(true) {
            Iterator<MatchStats> it = (Iterator<MatchStats>)MatchStats.matches.iterator();

            long Tkills = 0;
            long Tdeaths = 0;
            long Tassists = 0;
            long Tmatches = 0;
            long Twins = 0;

            while(it.hasNext()) {
                MatchStats ms = it.next();
                if(ms.skill!=MatchStats.Skill.VERY_HIGH) {
                    continue;
                }
                Tmatches++;
                Tkills+=ms.kills;
                Tdeaths+=ms.deaths;
                Tassists+=ms.assists;
                if(ms.win) {
                    Twins++;
                }
            }

            games2.setText(Tmatches+"");
            wr2.setText(((int)Math.round(Twins/(Tmatches*0.0001)))/100.0+"%");
            kda2.setText(0.01*Math.round((Tkills+Tassists)/(0.01*Tdeaths))+" ("+(Tkills)+"/"+(Tdeaths)+"/"+(Tassists)+")");
        }
        if(true) {
            Iterator<MatchStats> it = (Iterator<MatchStats>)MatchStats.matches.iterator();

            long Tkills = 0;
            long Tdeaths = 0;
            long Tassists = 0;
            long Tmatches = 0;
            long Twins = 0;

            while(it.hasNext()) {
                MatchStats ms = it.next();
                if(ms.skill!=MatchStats.Skill.HIGH) {
                    continue;
                }
                Tmatches++;
                Tkills+=ms.kills;
                Tdeaths+=ms.deaths;
                Tassists+=ms.assists;
                if(ms.win) {
                    Twins++;
                }
            }

            games3.setText(Tmatches+"");
            wr3.setText(((int)Math.round(Twins/(Tmatches*0.0001)))/100.0+"%");
            kda3.setText(0.01*Math.round((Tkills+Tassists)/(0.01*Tdeaths))+" ("+(Tkills)+"/"+(Tdeaths)+"/"+(Tassists)+")");
        }
        if(true) {
            Iterator<MatchStats> it = (Iterator<MatchStats>)MatchStats.matches.iterator();

            long Tkills = 0;
            long Tdeaths = 0;
            long Tassists = 0;
            long Tmatches = 0;
            long Twins = 0;

            while(it.hasNext()) {
                MatchStats ms = it.next();
                if(ms.skill!=MatchStats.Skill.NORMAL) {
                    continue;
                }
                Tmatches++;
                Tkills+=ms.kills;
                Tdeaths+=ms.deaths;
                Tassists+=ms.assists;
                if(ms.win) {
                    Twins++;
                }
            }

            games4.setText(Tmatches+"");
            wr4.setText(((int)Math.round(Twins/(Tmatches*0.0001)))/100.0+"%");
            kda4.setText(0.01*Math.round((Tkills+Tassists)/(0.01*Tdeaths))+" ("+(Tkills)+"/"+(Tdeaths)+"/"+(Tassists)+")");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    static int thesethreads = 0;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jButton5.setEnabled(false);
        new Thread() {
            @Override
            public void run() {
                Iterator<MatchStats> mit = MatchStats.matches.iterator();
                thesethreads = 0;
                while(mit.hasNext()) {
                    final MatchStats ms = mit.next();
                    if(!ms.skillchecked) {
                        while(thesethreads>19) {
                            try {
                                Thread.sleep(300);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(SkillStats.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        thesethreads++;
                        new Thread() {
                            @Override
                            public void run() {
                                ms.downloadSkill();
                                thesethreads--;
                            }
                        }.start();
                    }
                }
                while(thesethreads>0) {
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SkillStats.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                JOptionPane.showMessageDialog(null, "Skill Levels Updated");
                jButton5.setEnabled(true);
            }
        }.start();
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private static String getUrlSource(String url) throws IOException {
        URL yahoo = new URL(url);
        URLConnection yc = yahoo.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(
                yc.getInputStream(), "UTF-8"));
        String inputLine;
        StringBuilder a = new StringBuilder();
        while ((inputLine = in.readLine()) != null)
            a.append(inputLine);
        in.close();

        return a.toString();
    }
    
    
    public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue( Map<K, V> map ) {
        List<Map.Entry<K, V>> list = new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>() {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 ) {
                //return (o2.getValue()).compareTo( o1.getValue() );
                return (o1.getValue()).compareTo( o2.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list) {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }
    
    public static <K, V extends Comparable<? super V>> Map<K, V> sortByValueDesc( Map<K, V> map ) {
        List<Map.Entry<K, V>> list = new LinkedList<>( map.entrySet() );
        Collections.sort( list, new Comparator<Map.Entry<K, V>>() {
            @Override
            public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 ) {
                return (o2.getValue()).compareTo( o1.getValue() );
            }
        } );

        Map<K, V> result = new LinkedHashMap<>();
        for (Map.Entry<K, V> entry : list) {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }
    
    public static void main(String args[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SkillStats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SkillStats().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel games1;
    private javax.swing.JLabel games2;
    private javax.swing.JLabel games3;
    private javax.swing.JLabel games4;
    private javax.swing.JLabel gamesheader;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel kda1;
    private javax.swing.JLabel kda2;
    private javax.swing.JLabel kda3;
    private javax.swing.JLabel kda4;
    private javax.swing.JLabel kdaheader;
    private javax.swing.JLabel topleftblankheader1;
    private javax.swing.JLabel wr1;
    private javax.swing.JLabel wr2;
    private javax.swing.JLabel wr3;
    private javax.swing.JLabel wr4;
    private javax.swing.JLabel wrheader;
    // End of variables declaration//GEN-END:variables
}
